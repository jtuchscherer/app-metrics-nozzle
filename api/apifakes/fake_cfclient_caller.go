// This file was generated by counterfeiter
package apifakes

import (
	"sync"

	"github.com/jtuchscherer/app-metrics-nozzle/api"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
)

type FakeCFClientCaller struct {
	AppByGuidStub        func(guid string) (cfclient.App, error)
	appByGuidMutex       sync.RWMutex
	appByGuidArgsForCall []struct {
		guid string
	}
	appByGuidReturns struct {
		result1 cfclient.App
		result2 error
	}
	GetAppInstancesStub        func(guid string) (map[string]cfclient.AppInstance, error)
	getAppInstancesMutex       sync.RWMutex
	getAppInstancesArgsForCall []struct {
		guid string
	}
	getAppInstancesReturns struct {
		result1 map[string]cfclient.AppInstance
		result2 error
	}
	UsersByStub        func(guid string, entity string) ([]cfclient.User, error)
	usersByMutex       sync.RWMutex
	usersByArgsForCall []struct {
		guid   string
		entity string
	}
	usersByReturns struct {
		result1 []cfclient.User
		result2 error
	}
	ListSpacesStub        func() ([]cfclient.Space, error)
	listSpacesMutex       sync.RWMutex
	listSpacesArgsForCall []struct{}
	listSpacesReturns     struct {
		result1 []cfclient.Space
		result2 error
	}
	ListOrgsStub        func() ([]cfclient.Org, error)
	listOrgsMutex       sync.RWMutex
	listOrgsArgsForCall []struct{}
	listOrgsReturns     struct {
		result1 []cfclient.Org
		result2 error
	}
	ListAppsStub        func() ([]cfclient.App, error)
	listAppsMutex       sync.RWMutex
	listAppsArgsForCall []struct{}
	listAppsReturns     struct {
		result1 []cfclient.App
		result2 error
	}
	AppSpaceStub        func(app cfclient.App) (cfclient.Space, error)
	appSpaceMutex       sync.RWMutex
	appSpaceArgsForCall []struct {
		app cfclient.App
	}
	appSpaceReturns struct {
		result1 cfclient.Space
		result2 error
	}
	SpaceOrgStub        func(space cfclient.Space) (cfclient.Org, error)
	spaceOrgMutex       sync.RWMutex
	spaceOrgArgsForCall []struct {
		space cfclient.Space
	}
	spaceOrgReturns struct {
		result1 cfclient.Org
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClientCaller) AppByGuid(guid string) (cfclient.App, error) {
	fake.appByGuidMutex.Lock()
	fake.appByGuidArgsForCall = append(fake.appByGuidArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("AppByGuid", []interface{}{guid})
	fake.appByGuidMutex.Unlock()
	if fake.AppByGuidStub != nil {
		return fake.AppByGuidStub(guid)
	} else {
		return fake.appByGuidReturns.result1, fake.appByGuidReturns.result2
	}
}

func (fake *FakeCFClientCaller) AppByGuidCallCount() int {
	fake.appByGuidMutex.RLock()
	defer fake.appByGuidMutex.RUnlock()
	return len(fake.appByGuidArgsForCall)
}

func (fake *FakeCFClientCaller) AppByGuidArgsForCall(i int) string {
	fake.appByGuidMutex.RLock()
	defer fake.appByGuidMutex.RUnlock()
	return fake.appByGuidArgsForCall[i].guid
}

func (fake *FakeCFClientCaller) AppByGuidReturns(result1 cfclient.App, result2 error) {
	fake.AppByGuidStub = nil
	fake.appByGuidReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClientCaller) GetAppInstances(guid string) (map[string]cfclient.AppInstance, error) {
	fake.getAppInstancesMutex.Lock()
	fake.getAppInstancesArgsForCall = append(fake.getAppInstancesArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("GetAppInstances", []interface{}{guid})
	fake.getAppInstancesMutex.Unlock()
	if fake.GetAppInstancesStub != nil {
		return fake.GetAppInstancesStub(guid)
	} else {
		return fake.getAppInstancesReturns.result1, fake.getAppInstancesReturns.result2
	}
}

func (fake *FakeCFClientCaller) GetAppInstancesCallCount() int {
	fake.getAppInstancesMutex.RLock()
	defer fake.getAppInstancesMutex.RUnlock()
	return len(fake.getAppInstancesArgsForCall)
}

func (fake *FakeCFClientCaller) GetAppInstancesArgsForCall(i int) string {
	fake.getAppInstancesMutex.RLock()
	defer fake.getAppInstancesMutex.RUnlock()
	return fake.getAppInstancesArgsForCall[i].guid
}

func (fake *FakeCFClientCaller) GetAppInstancesReturns(result1 map[string]cfclient.AppInstance, result2 error) {
	fake.GetAppInstancesStub = nil
	fake.getAppInstancesReturns = struct {
		result1 map[string]cfclient.AppInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClientCaller) UsersBy(guid string, entity string) ([]cfclient.User, error) {
	fake.usersByMutex.Lock()
	fake.usersByArgsForCall = append(fake.usersByArgsForCall, struct {
		guid   string
		entity string
	}{guid, entity})
	fake.recordInvocation("UsersBy", []interface{}{guid, entity})
	fake.usersByMutex.Unlock()
	if fake.UsersByStub != nil {
		return fake.UsersByStub(guid, entity)
	} else {
		return fake.usersByReturns.result1, fake.usersByReturns.result2
	}
}

func (fake *FakeCFClientCaller) UsersByCallCount() int {
	fake.usersByMutex.RLock()
	defer fake.usersByMutex.RUnlock()
	return len(fake.usersByArgsForCall)
}

func (fake *FakeCFClientCaller) UsersByArgsForCall(i int) (string, string) {
	fake.usersByMutex.RLock()
	defer fake.usersByMutex.RUnlock()
	return fake.usersByArgsForCall[i].guid, fake.usersByArgsForCall[i].entity
}

func (fake *FakeCFClientCaller) UsersByReturns(result1 []cfclient.User, result2 error) {
	fake.UsersByStub = nil
	fake.usersByReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClientCaller) ListSpaces() ([]cfclient.Space, error) {
	fake.listSpacesMutex.Lock()
	fake.listSpacesArgsForCall = append(fake.listSpacesArgsForCall, struct{}{})
	fake.recordInvocation("ListSpaces", []interface{}{})
	fake.listSpacesMutex.Unlock()
	if fake.ListSpacesStub != nil {
		return fake.ListSpacesStub()
	} else {
		return fake.listSpacesReturns.result1, fake.listSpacesReturns.result2
	}
}

func (fake *FakeCFClientCaller) ListSpacesCallCount() int {
	fake.listSpacesMutex.RLock()
	defer fake.listSpacesMutex.RUnlock()
	return len(fake.listSpacesArgsForCall)
}

func (fake *FakeCFClientCaller) ListSpacesReturns(result1 []cfclient.Space, result2 error) {
	fake.ListSpacesStub = nil
	fake.listSpacesReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClientCaller) ListOrgs() ([]cfclient.Org, error) {
	fake.listOrgsMutex.Lock()
	fake.listOrgsArgsForCall = append(fake.listOrgsArgsForCall, struct{}{})
	fake.recordInvocation("ListOrgs", []interface{}{})
	fake.listOrgsMutex.Unlock()
	if fake.ListOrgsStub != nil {
		return fake.ListOrgsStub()
	} else {
		return fake.listOrgsReturns.result1, fake.listOrgsReturns.result2
	}
}

func (fake *FakeCFClientCaller) ListOrgsCallCount() int {
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	return len(fake.listOrgsArgsForCall)
}

func (fake *FakeCFClientCaller) ListOrgsReturns(result1 []cfclient.Org, result2 error) {
	fake.ListOrgsStub = nil
	fake.listOrgsReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClientCaller) ListApps() ([]cfclient.App, error) {
	fake.listAppsMutex.Lock()
	fake.listAppsArgsForCall = append(fake.listAppsArgsForCall, struct{}{})
	fake.recordInvocation("ListApps", []interface{}{})
	fake.listAppsMutex.Unlock()
	if fake.ListAppsStub != nil {
		return fake.ListAppsStub()
	} else {
		return fake.listAppsReturns.result1, fake.listAppsReturns.result2
	}
}

func (fake *FakeCFClientCaller) ListAppsCallCount() int {
	fake.listAppsMutex.RLock()
	defer fake.listAppsMutex.RUnlock()
	return len(fake.listAppsArgsForCall)
}

func (fake *FakeCFClientCaller) ListAppsReturns(result1 []cfclient.App, result2 error) {
	fake.ListAppsStub = nil
	fake.listAppsReturns = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClientCaller) AppSpace(app cfclient.App) (cfclient.Space, error) {
	fake.appSpaceMutex.Lock()
	fake.appSpaceArgsForCall = append(fake.appSpaceArgsForCall, struct {
		app cfclient.App
	}{app})
	fake.recordInvocation("AppSpace", []interface{}{app})
	fake.appSpaceMutex.Unlock()
	if fake.AppSpaceStub != nil {
		return fake.AppSpaceStub(app)
	} else {
		return fake.appSpaceReturns.result1, fake.appSpaceReturns.result2
	}
}

func (fake *FakeCFClientCaller) AppSpaceCallCount() int {
	fake.appSpaceMutex.RLock()
	defer fake.appSpaceMutex.RUnlock()
	return len(fake.appSpaceArgsForCall)
}

func (fake *FakeCFClientCaller) AppSpaceArgsForCall(i int) cfclient.App {
	fake.appSpaceMutex.RLock()
	defer fake.appSpaceMutex.RUnlock()
	return fake.appSpaceArgsForCall[i].app
}

func (fake *FakeCFClientCaller) AppSpaceReturns(result1 cfclient.Space, result2 error) {
	fake.AppSpaceStub = nil
	fake.appSpaceReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClientCaller) SpaceOrg(space cfclient.Space) (cfclient.Org, error) {
	fake.spaceOrgMutex.Lock()
	fake.spaceOrgArgsForCall = append(fake.spaceOrgArgsForCall, struct {
		space cfclient.Space
	}{space})
	fake.recordInvocation("SpaceOrg", []interface{}{space})
	fake.spaceOrgMutex.Unlock()
	if fake.SpaceOrgStub != nil {
		return fake.SpaceOrgStub(space)
	} else {
		return fake.spaceOrgReturns.result1, fake.spaceOrgReturns.result2
	}
}

func (fake *FakeCFClientCaller) SpaceOrgCallCount() int {
	fake.spaceOrgMutex.RLock()
	defer fake.spaceOrgMutex.RUnlock()
	return len(fake.spaceOrgArgsForCall)
}

func (fake *FakeCFClientCaller) SpaceOrgArgsForCall(i int) cfclient.Space {
	fake.spaceOrgMutex.RLock()
	defer fake.spaceOrgMutex.RUnlock()
	return fake.spaceOrgArgsForCall[i].space
}

func (fake *FakeCFClientCaller) SpaceOrgReturns(result1 cfclient.Org, result2 error) {
	fake.SpaceOrgStub = nil
	fake.spaceOrgReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClientCaller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appByGuidMutex.RLock()
	defer fake.appByGuidMutex.RUnlock()
	fake.getAppInstancesMutex.RLock()
	defer fake.getAppInstancesMutex.RUnlock()
	fake.usersByMutex.RLock()
	defer fake.usersByMutex.RUnlock()
	fake.listSpacesMutex.RLock()
	defer fake.listSpacesMutex.RUnlock()
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	fake.listAppsMutex.RLock()
	defer fake.listAppsMutex.RUnlock()
	fake.appSpaceMutex.RLock()
	defer fake.appSpaceMutex.RUnlock()
	fake.spaceOrgMutex.RLock()
	defer fake.spaceOrgMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCFClientCaller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.CFClientCaller = new(FakeCFClientCaller)
